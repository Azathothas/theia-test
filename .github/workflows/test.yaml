name: 0xf ➼ Login (gh-runner) Windows-Server-2022
#Image : https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
on:
  workflow_dispatch:
env:
  #Authenticate with Ephemeral Key: https://login.tailscale.com/admin/settings/keys
  TSKEY: tskey-auth-ksYVhg1CNTRL-A5QDDdH66vU2pVMcgBy2wUYwzgL4Sv2F
  THOST: gh-runner-windows
  WINDOWS_PASSWORD: 0xff_WIN1337f#
  

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 720  # Adjust the timeout as needed
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Get Sys-Info || Set User
        run: |
          # Print Basic Info
          Write-Host "Current User: $env:USERNAME"
          # Set a password, usually slight complex so it meets minimum requirements
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "${{ env.WINDOWS_PASSWORD }}" -Force)
          Write-Host "Current Pass: ${{ env.WINDOWS_PASSWORD }}"
          Write-Host "Is_Admin: $((New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))"
          Write-Host "Hostname: $env:COMPUTERNAME"
          Write-Host "Home: $env:HOMEDRIVE$env:HOMEPATH"
          Write-Host "ENV_PATH: $env:PATH"
          # Run winfetch
          #(Invoke-WebRequest "https://raw.githubusercontent.com/lptstr/winfetch/master/winfetch.ps1" -UseBasicParsing).Content.Remove(0,1) | Invoke-Expression 2>$null
        continue-on-error: true

      - name: Setup Tailscale
        run: |
          # Download the installer
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/unstable/tailscale-setup-1.47.36.exe" -OutFile "tailscale-setup.exe"
          # Set it up
          Start-Process -Wait -FilePath ".\tailscale-setup.exe" -ArgumentList "/install", "/quiet"
          # Run the service
          Start-Process -NoNewWindow -FilePath "C:\Program Files\Tailscale\tailscale-ipn.exe"
          Start-Sleep -Seconds 2
          Start-Process -NoNewWindow -FilePath "C:\Program Files\Tailscale\tailscale.exe" -ArgumentList "up", "--unattended", --hostname="${{ env.THOST }}", --authkey="${{ env.TSKEY }}"
        continue-on-error: true
        
    #https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=powershell    
      - name: Start SSH 
        run: |      
         # TailScale SSH is not supported on windows: https://github.com/tailscale/tailscale/issues/4697
         # Instead rely on a manual approach
          Add-WindowsCapability -Online -Name OpenSSH.Server*
          choco install openssh -y
         #Start Service
          . "C:\Program Files\OpenSSH-Win64\install-sshd.ps1"
          . "C:\Program Files\OpenSSH-Win64\ssh-keygen.exe" -A
          Start-Process -Wait -FilePath "C:\Program Files\OpenSSH-Win64\sshd.exe" -WindowStyle Hidden
          Start-Sleep 5
         #Fix Perms 
          #https://github.com/PowerShell/Win32-OpenSSH/wiki/OpenSSH-utility-scripts-to-fix-file-permissions
          . "C:\Program Files\OpenSSH-Win64\FixHostFilePermissions.ps1" -Confirm:$false
          . "C:\Program Files\OpenSSH-Win64\FixUserFilePermissions.ps1" -Confirm:$false
         #Add Public SSH Key
          New-Item -Path "$env:USERPROFILE\.ssh" -ItemType Directory -Force
          Add-Content -Path "$env:USERPROFILE\.ssh\authorized_keys" -Value "$((Invoke-RestMethod -Uri "https://github.com/azathothas.keys").Split("`n")[1])"
         #Configure SSH Config
          $filePath = Join-Path $env:ProgramData "ssh\sshd_config"; if (-not (Test-Path $filePath)) { New-Item -Path (Split-Path $filePath) -Name "sshd_config" -ItemType File }; Add-Content -Path $filePath -Value "PasswordAuthentication yes`nAllowTcpForwarding yes`nPubkeyAuthentication yes"
         #Configure Firewall
          New-NetFirewallRule -Protocol TCP -LocalPort 22 -Direction Inbound -Action Allow -DisplayName "OpenSSH-Server-In-TCP"
          New-NetFirewallRule -Protocol TCP -LocalPort 22 -Direction Outbound -Action Allow -DisplayName "OpenSSH-Server-Out-TCP"
          New-NetFirewallRule -Protocol TCP -LocalPort 22 -Direction Inbound -Action Allow -DisplayName "OpenSSH-Server-In-TCP-EdgeTraversal" -EdgeTraversalPolicy Allow
          if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..." New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22} else {Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."}
         #Finally ReStart 
          #Stop-Process -Name sshd -Force 2>$null
          Start-Process -Wait -FilePath "C:\Program Files\OpenSSH-Win64\sshd.exe" -WindowStyle Hidden ; Start-Sleep 5
         #Check 
          Get-Process -Name sshd   
        continue-on-error: true

      - name: Print Connection Details
        run: |
         #TailScale
         & "C:\Program Files\Tailscale\tailscale.exe" status --peers=false
        continue-on-error: true
      - name: Breakpoint || Sleep ∞
        run: |        
          while ($true) {Start-Sleep -Seconds 1}  
